league_oauth2_server:
    authorization_server:
        private_key: '%env(resolve:OAUTH_PRIVATE_KEY)%'
        private_key_passphrase: '%env(resolve:OAUTH_PASSPHRASE)%'
        encryption_key: '%env(resolve:OAUTH_ENCRYPTION_KEY)%'

        # The type of value of 'encryption_key'
        encryption_key_type:  plain # One of "plain"; "defuse"

        # How long the issued access token should be valid for.
        # The value should be a valid interval: http://php.net/manual/en/dateinterval.construct.php#refsect1-dateinterval.construct-parameters
        access_token_ttl:     PT1H

        # How long the issued refresh token should be valid for.
        # The value should be a valid interval: http://php.net/manual/en/dateinterval.construct.php#refsect1-dateinterval.construct-parameters
        refresh_token_ttl:    P1M

        # How long the issued auth code should be valid for.
        # The value should be a valid interval: http://php.net/manual/en/dateinterval.construct.php#refsect1-dateinterval.construct-parameters
        auth_code_ttl:        PT10M

        # Whether to enable the client credentials grant
        enable_client_credentials_grant: true

        # Whether to enable the password grant
        enable_password_grant: true

        # Whether to enable the refresh token grant
        enable_refresh_token_grant: true

        # Whether to enable the authorization code grant
        enable_auth_code_grant: true

        # Whether to require code challenge for public clients for the auth code grant
        require_code_challenge_for_public_clients: true

        # Whether to enable access token saving to persistence layer (default to true)
        persist_access_token: true

        # Whether to revoke refresh tokens after they were used for all grant types (default to true)
        revoke_refresh_tokens: true

    resource_server:
        public_key: '%env(resolve:OAUTH_PUBLIC_KEY)%'
        # The leeway in seconds to allow for clock skew in JWT verification. Default PT0S (no leeway).
        jwt_leeway: null
    scopes:
        available: ['password']
        default: ['password']
    persistence:
        doctrine:
            # Name of the entity manager that you wish to use for managing clients and tokens.
            entity_manager:       default

            # Table name prefix.
            table_prefix:         oauth2_

    role_prefix:          ROLE_OAUTH2_
    client:
        # Set a custom client class. Must be a League\Bundle\OAuth2ServerBundle\Model\Client
        classname:        League\Bundle\OAuth2ServerBundle\Model\Client

when@test:
    league_oauth2_server:
        persistence:
            in_memory: null
